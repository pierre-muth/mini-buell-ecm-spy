#platform "GOLDELOX-GFX2"

/*
     -- GOLDELOX Platform --
*/

#inherit "4DGL_16bitColours.fnc"

#DATA
    byte req 0x01, 0x00, 0x42, 0x02, 0xFF, 0x02, 0x43, 0x03, 0xFD
#END
var EngTemp, IntakeTemp, AFV, EngSpeed, GearSelect, BattVolt, Trottle;
var combuf[60];
var ETlog[64], AFVlog[64];
var ETptr, AFVptr, LogParity;



func IncPtr()  // incrementer les pointeurs des buffer log

    if (LogParity)
        LogParity := 0;
        ETptr++;
        AFVptr++;
    else
        LogParity := 1;
    endif

    if (AFVptr > 63)
        AFVptr := 0;
    endif

    if (ETptr > 63)
        ETptr := 0;
    endif

endfunc

func Log()  // Logging dans buffer tournant
    var i, j;
    i := EngTemp / 37;          //37
    j := ((AFV-800) / 2);

    if (LogParity)
        ETlog[ETptr] := (ETlog[ETptr] & 0x00FF) + ((i & 0x00FF) * 0x0100);
    else
        ETlog[ETptr] := (i & 0x00FF);
    endif

    if (LogParity)
        AFVlog[AFVptr] := (AFVlog[AFVptr] & 0x00FF) + ((j & 0x00FF) * 0x0100);
    else
        AFVlog[AFVptr] := (j & 0x00FF);
    endif

    IncPtr();

endfunc

func DispChart()  // afficher le graphique
    var i, ETdot, AFVdot;
    i := 1;

    gfx_Clipping(OFF);
    gfx_ClipWindow(0, 65, 128, 128);
    gfx_Clipping(ON);

    while (i < 129)

        IncPtr();
        gfx_Line(i, 128, i, 64, 0x0000);

        if (LogParity)
            ETdot := ( ETlog[ETptr] / 0x100 );
            AFVdot := ( AFVlog[AFVptr] / 0x100 );
        else
            ETdot := ( ETlog[ETptr] & 0x00FF );
            AFVdot := ( AFVlog[AFVptr] & 0x00FF );
        endif

        gfx_Line(i, 128, i, (128 -  ETdot), 0x8200);
        gfx_PutPixel(i, (128 -  ETdot), 0xFC00);
        gfx_Line(i, (129 - (AFVdot/3) ), i, (127 - ( AFVdot/3) ), YELLOW);
        gfx_PutPixel(i, (130 -  (AFVdot/3)), 0x0000);
        gfx_PutPixel(i, (127 -  (AFVdot/3)), 0x0000);
        i++;

    wend
    gfx_Clipping(OFF);

endfunc

func printNumber(var number, var ypos) // afficher chiffres avec Gif sur SD
    var n, xpos;
    xpos := 127;
    n := 4;     // 4 digits to print

    while(n--)

        if((n == 3) && (number < 0))             // signe moins
            media_SetSector(0x0000, 0x0018);
            media_Image(30, ypos);
        endif

        if((n == 3) && (number >= 0))            // pas de signe moins
            gfx_RectangleFilled(30, ypos, 41, ypos+28 , BLACK);
        endif

        if (n == 2)                              // virgule
            media_SetSector(0x0000, 0x0017);
            xpos := xpos-7;
            media_Image(xpos, ypos);
        endif

        media_SetSector(0x0000, 0x0000);
        xpos := xpos-19;                        // left shift image position
        media_VideoFrame(xpos, ypos, ABS( number%10 ));     // print numbers

        number := number/10;

    wend



endfunc

func DispTxt()  // afficher icones

    media_SetSector(0x0000, 0x001E);        // thermometer image
    media_Image(8,0);
    printNumber( (EngTemp - 400), 0);

    media_SetSector(0x0000, 0x001A);        // AFV image
    media_Image(0,30);
    printNumber(AFV, 30);

endfunc

func Request()          // envoi requete live data
    var i;
    i := 0;
    while (i < 9)
        serout(req[i]);
        i++;
    wend
endfunc

//--------------- Main -----------------

func main()
var chr, timeOut, logCount, x;
    timeOut := 0;
    logCount := 0;
    ETptr := 0;
    AFVptr := 0;
    LogParity := 0;
    EngTemp:=0;

repeat
    while (media_Init() == 0)           // initialise and test the uSD card
        print("No uSD CARD Installed");
        pause(2000);
        gfx_Cls();
    wend

    gfx_Cls();
    gfx_Contrast(15);
    //gfx_Set(SCREEN_MODE, 1);

    setbaud(BAUD_9600);                 //  9600 baud comms
    com_Init(combuf, 120, 0);           // set up a comms circular buffer, use the entire buffer, no sync character

    pokeW(TIMER0, 1000);                // set delay so we stay in next loop for 1 seconds

    repeat

        if (com_Full())
            txt_MoveCursor(1,1);
            print("Buffer Full ");         // print error
        endif

        if (com_Error())
            txt_MoveCursor(2,1);
            print("Comms Error ");         // print error
        endif

        if (!peekW(TIMER0))                             // fin timer0
            if (com_Count())                            // si quelques chose dans buffer In
                x := 0;
                EngSpeed := 0;
                Trottle := 0;
                BattVolt := 0;
                EngTemp := 0;
                IntakeTemp := 0;
                AFV := 0;
                GearSelect := 0;

                while ( (chr:=serin()) >= 0 )           // vider buffer in
                    if (x == 11) EngSpeed := EngSpeed + chr;
                    if (x == 12) EngSpeed := EngSpeed + ( chr * 0x100);

                    if (x == 25) Trottle := Trottle + chr;
                    if (x == 26) Trottle := Trottle + ( chr * 0x100);

                    if (x == 28) BattVolt := BattVolt + chr;
                    if (x == 29) BattVolt := BattVolt + ( chr * 0x100);

                    if (x == 30) EngTemp := EngTemp + chr;                  // 30 = offset last byte Engine temp
                    if (x == 31) EngTemp := EngTemp + ( chr * 0x100);       // 31 = offset first byte Engine temp

                    if (x == 32) IntakeTemp := IntakeTemp + chr;
                    if (x == 33) IntakeTemp := IntakeTemp + ( chr * 0x100);

                    if (x == 52) AFV := AFV + chr;                          // 52 = AFV
                    if (x == 53) AFV := AFV + ( chr * 0x100);               // 53 = AFV

                    if (x == 100) GearSelect := chr;
                    x++;
                wend

                logCount++;

                if (logCount > 1)           // Logging tout les n request
                    logCount := 0;
                    Log();
                    DispChart();
                endif

            endif

            DispTxt();                  // afficher valeur instantannees

            Request();                  // send live data request

            pokeW(TIMER0, 2000);

        endif

    until ( com_Full() || com_Error() );      // reset if error occurred

forever



endfunc


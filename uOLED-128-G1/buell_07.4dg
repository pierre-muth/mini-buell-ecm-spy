#platform "GOLDELOX-GFX2"

/*
     -- GOLDELOX Platform --
*/

#inherit "4DGL_16bitColours.fnc"

#DATA
    byte req 0x01, 0x00, 0x42, 0x02, 0xFF, 0x02, 0x43, 0x03, 0xFD
#END

var combuf[64];
var ETlog[64], AFVlog[64];
var EngTemp, IntakeTemp, AFV, EngSpeed, GearSelect, BattVolt, Trottle, CheckSum, CalcCS;
var screenMode, screenFliped, logCount;
var ETptr, AFVptr, LogParity;




func IncPtr()  // incrementer les pointeurs des buffer log

    if (LogParity)
        LogParity := 0;
        ETptr++;
        AFVptr++;
    else
        LogParity := 1;
    endif

    if (AFVptr > 63)
        AFVptr := 0;
    endif

    if (ETptr > 63)
        ETptr := 0;
    endif

endfunc

func Log()  // Logging dans buffer tournant
    var i, j;
    i := EngTemp / 37;          //37
    j := ((AFV/2) - 400);

    if (LogParity)
        ETlog[ETptr] := (ETlog[ETptr] & 0x00FF) + ((i & 0x00FF) * 0x0100);
        AFVlog[AFVptr] := (AFVlog[AFVptr] & 0x00FF) + ((j & 0x00FF) * 0x0100);
    else
        ETlog[ETptr] := (i & 0x00FF);
        AFVlog[AFVptr] := (j & 0x00FF);
    endif

    IncPtr();

endfunc

func DispChart()  // afficher le graphique
    var i, ETdot, AFVdot;
    i := 1;

    // seulement le bas de l'écran
    gfx_Clipping(OFF);
    gfx_ClipWindow(0, 65, 128, 128);
    gfx_Clipping(ON);

    while (i < 128)

        IncPtr();

        //efface la ligne courante
        gfx_Line(i, 128, i, 64, 0x0000);

        //lecture des 2 buffers
        if (LogParity)
            pokeW(VM_OVERFLOW, 0);
            ETdot := ( ETlog[ETptr] >> 8 );
            pokeW(VM_OVERFLOW, 0);
            AFVdot := ( AFVlog[AFVptr] >> 8 );
        else
            ETdot := ( ETlog[ETptr] & 0x00FF );
            AFVdot := ( AFVlog[AFVptr] & 0x00FF );
        endif

        //dessin temperature moteur
        gfx_Line(i, 128, i, (138 -  ETdot), (0x8200 ));
        gfx_PutPixel(i, (138 -  ETdot), 0xFC00);
        gfx_PutPixel(i, (137 -  ETdot), 0xFC00);

        //dessin AFV
        gfx_PutPixel(i, (128 -  (AFVdot/3)), 0xFFFF);
        gfx_PutPixel(i, (129 -  (AFVdot/3)), 0xFFFF);
        gfx_PutPixel(i, (130 -  (AFVdot/3)), 0x0000);
        gfx_PutPixel(i, (127 -  (AFVdot/3)), 0x0000);

        i++;

    wend
    IncPtr();
    gfx_Clipping(OFF);

endfunc

func DispBigTxt()  // afficher icones

    //engine temperature
    txt_FGcolour(0xFC00);
    txt_Width(3);
    txt_Height(3);
    txt_MoveCursor(0,0);
    putnum(0xB30A, (EngTemp/10)-40);
    txt_MoveCursor(0,4);
    putstr(",");
    txt_MoveCursor(0,5);
    putnum(UDEC1Z, IntakeTemp%10);

    //AFV
    txt_FGcolour(0xFFFF);
    txt_Width(3);
    txt_Height(3);
    txt_MoveCursor(1,0);
    putnum(0xB30A, (AFV/10));
    txt_MoveCursor(1,4);
    putstr(",");
    txt_MoveCursor(1,5);
    putnum(UDEC1Z, AFV%10);

endfunc

func Disp()  // draw different screens

    if (screenFliped)  gfx_Cls();

    if (screenMode == 0)
        DispBigTxt();
        if (screenFliped || (logCount == 0))
             DispChart();
        endif

    endif

    if (screenMode == 1)
        //battery
        txt_FGcolour(0xFC00);
        txt_MoveCursor(0,0);
        txt_Bold(1);
        print("Batt Volt");
        txt_FGcolour(0xFFFF);
        txt_MoveCursor(0,16);
        putnum(UDEC2Z, BattVolt%100);
        txt_MoveCursor(0,15);
        print(",");
        txt_MoveCursor(0,13);
        putnum(UDEC2ZB, BattVolt/100);

        //Intake temperature
        txt_FGcolour(0xFC00);
        txt_MoveCursor(2,0);
        txt_Bold(1);
        print("Intake");
        txt_FGcolour(0xFFFF);
        txt_MoveCursor(2,16);
        putnum(UDEC1Z, IntakeTemp%10);
        txt_MoveCursor(2,15);
        print(",");
        txt_MoveCursor(2,11);
        putnum(0xB30A, (IntakeTemp/10)-40);

        //Engine speed
        txt_FGcolour(0xFC00);
        txt_MoveCursor(4,0);
        txt_Bold(1);
        print("RPM");
        txt_FGcolour(0xFFFF);
        txt_MoveCursor(4,10);
        putnum(UDEC5ZB, EngSpeed);

        //throttle position
        txt_FGcolour(0xFC00);
        txt_MoveCursor(6,0);
        txt_Bold(1);
        print("Throttle");
        txt_FGcolour(0xFFFF);
        txt_MoveCursor(6,16);
        putnum(UDEC1Z, Trottle%10);
        txt_MoveCursor(6,15);
        print(",");
        txt_MoveCursor(6,11);
        putnum(0xB30A, (Trottle/10));

        //Check Sum
        txt_FGcolour(0xFC00);
        txt_MoveCursor(15,0);
        print("CS Calc/Rx");
        txt_FGcolour(0xFFFF);
        txt_MoveCursor(15, 13);
        print([HEX2]CalcCS);
        print("/");
        print([HEX2]CheckSum);

    endif

    if (screenMode == 2)
    endif

endfunc

func Request()          // envoi requete live data
    var i;
    i := 0;
    while (i < 9)
        serout(req[i]);
        i++;
    wend
endfunc

//--------------- Main -----------------

func main()
    var chr, x;

    logCount := 0;
    ETptr := 0;
    AFVptr := 0;
    LogParity := 0;
    EngTemp:=0;
    CalcCS := 0;
    CheckSum := 0;
    screenMode := 0;
    screenFliped := 0;

    for (x:=0; x<64; x++)
         ETlog[x] := 0;
         AFVlog[x] :=0;
    next
    for (x:=0; x<70; x++)
         combuf[x] := 0;
    next

repeat

    gfx_Cls();
    gfx_Contrast(16);
    setbaud(BAUD_9600);                 //  9600 baud comms
    com_Init(combuf, 128, 0);           // set up a comms circular buffer, use the entire buffer, no sync character
    pin_Set(INPUT, IO2);                // pin 4 as input
    pokeW(TIMER0, 2000);                // set delay so we stay in next loop for 1 seconds

    repeat

        if (!peekW(TIMER0))                             // fin timer0
        screenFliped :=0;

            if (com_Count())                            // si quelques chose dans buffer In
                x := 0;
                EngSpeed := 0;
                Trottle := 0;
                BattVolt := 0;
                EngTemp := 0;
                IntakeTemp := 0;
                AFV := 0;
                GearSelect := 0;
                CalcCS := 0;
                CheckSum := 0;

                 // vider buffer in
                while ( (chr:=serin()) >= 0 )
                    if (x == 11) EngSpeed := EngSpeed + chr;                 // 11
                    if (x == 12) EngSpeed := EngSpeed + ( chr * 0x100);      // 12
                    if (x == 25) Trottle := Trottle + chr;                   // 25
                    if (x == 26) Trottle := Trottle + ( chr * 0x100);        // 26
                    if (x == 28) BattVolt := BattVolt + chr;                 // 28
                    if (x == 29) BattVolt := BattVolt + ( chr * 0x100);      // 29
                    if (x == 30) EngTemp := EngTemp + chr;                   // 30 = offset last byte Engine temp
                    if (x == 31) EngTemp := EngTemp + ( chr * 0x100);        // 31 = offset first byte Engine temp
                    if (x == 32) IntakeTemp := IntakeTemp + chr;            // 32
                    if (x == 33) IntakeTemp := IntakeTemp + ( chr * 0x100); // 33
                    if (x == 52) AFV := AFV + chr;                          // 52 = AFV
                    if (x == 53) AFV := AFV + ( chr * 0x100);               // 53 = AFV
                    if (x == 106) CheckSum := chr;                         // 106 data XOR checksum
                    if ((x > 0) && (x < 106)) CalcCS ^= chr;       // compute XOR check sum

                    x++;
                wend

                if (CalcCS == CheckSum)         //si checkSum ok
                    logCount++;
                    if (logCount > 4)           // Logging tout les n request
                        logCount := 0;
                        Log();
                    endif
                endif

                Disp();

            endif

            Request();                  // send live data request

            pokeW(TIMER0, 1000);

        endif

         if ( !pin_Read(IO2) && !screenFliped)
             screenFliped := 1;
             screenMode++;
             if(screenMode > 2)
                screenMode := 0;
             endif
             Disp();
        endif

    until ( com_Full() || com_Error() );      // reset if error occurred

forever

endfunc

